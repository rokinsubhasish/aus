trigger: none

schedules:
  - cron: "0 5 * * 1-5"
    displayName: Daily E2E Regression Test
    branches:
      include:
        - master
    always: "true"
stages:
  - stage: RunTests
    lockBehavior: sequential
    jobs:
      # We use a deployment job here because deployment jobs allow us to specify a environment.
      # And this environment is configured to not allow parallel pipeline runs.
      # This way we prevent multiple e2e pipelines to run in parallel.
      - deployment: Regression
        workspace:
          clean: all
        environment: deploy_dev # same as deploy dev pipeline so we don't deploy new version during e2e test runs
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: "1"

                - bash: docker login acrzvoovesaasdev.azurecr.io --username "$(ACR Pull Client Id)" --password "$(ACR Pull Client Secret)"
                  displayName: Login to ACR

                - bash: docker build --pull -t regression:latest ./playwright
                  displayName: build regression image

                - bash: |
                    set -euo pipefail

                    docker rm core-e2e-tests || echo "no container from previous run to clean up - will continue"
                    mkdir -p $(System.DefaultWorkingDirectory)/PlaywrightTestResults
                    docker run --name core-e2e-tests \
                      -e TEST_PASSWORD="$(TEST_PASSWORD)" \
                      regression:latest || exit_code=$?
                    docker cp core-e2e-tests:/regression/test-results-all $(System.DefaultWorkingDirectory)/PlaywrightTestResults
                    ls $(System.DefaultWorkingDirectory)/PlaywrightTestResults
                    docker rm core-e2e-tests
                    if [ -n "${exit_code:-}" ]; then
                      exit $exit_code
                    fi
                  displayName: run regression tests

                - bash: docker rmi regression:latest
                  condition: always()
                  displayName: cleanup image

                - task: PublishTestResults@2
                  displayName: "Publish Regression Test run results"
                  condition: succeededOrFailed()
                  inputs:
                    searchFolder: $(System.DefaultWorkingDirectory)/PlaywrightTestResults/test-results-all
                    failTaskOnFailedTests: true # Optional
                    testRunTitle: Regression # Optional
                    testResultsFormat: JUnit
                    testResultsFiles: "*.xml"
                    mergeTestResults: true

                - task: PublishPipelineArtifact@1
                  inputs:
                    targetPath: PlaywrightTestResults
                    artifact: playwright-report
                    publishLocation: "pipeline"
                  condition: succeededOrFailed()

                - bash: rm -rf $(System.DefaultWorkingDirectory)/PlaywrightTestResults
                  displayName: Cleanup TestResults

      - job: UpdateToTeams
        dependsOn: Regression
        condition: failed()
        pool:
          vmImage: ubuntu-22.04
        steps:
          - checkout: git://zvoove Core/PipelineUtils
            fetchDepth: "1"
            path: s/pipeline-utils

          - bash: |
              set -euo pipefail
              cd $(Agent.BuildDirectory)/s/pipeline-utils/scripts/send-teams-alert
              pip install -r requirements.txt
              ./main.py --webhook_url "$(Webhook Url)" --title "$(Build.DefinitionName) failed, fix it error or create a ticket" \
                --link "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs"
            displayName: Sending teams alert
